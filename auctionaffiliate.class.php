<?php
/**
 * Auction Affiliate v1.0
 * http://www.auctionaffiliate.co
 *
 * By Joseph Hawes
 * http://www.josephhawes.co.uk
 */
class AuctionAffiliate {private $settings;private $request_parameters;private $request;private $response;private $html_output;private $aHash;private $hostname;function __construct() {$this->settings = array('html_output_id_prefix' => 'auction-affiliate-','html_output_prefix' => 'aa-','stylesheet_url' => 'http://localhost/auctionaffiliate/assets/theme/css/themes.css','request_endpoint' => 'http://localhost/auctionaffiliate/items/get/','request_parameter_groups' => array('keyword'  => array('name' => 'Keyword Query','description' => 'Start by entering your keyword query and your ePN campaign ID. This determines which items are pulled from eBay and ensures links to eBay are credited to you.'),'affiliate'  => array('name' => 'Affiliate Details','description' => 'Additional eBay Partner Network details. You can also choose which eBay site your items are pulled from and which site you link to.'),'items'  => array('name' => 'Item Options','description' => 'Use these options to specify item filters based on listing type, condition and price range.'),'display'  => array('name' => 'Display Options','description' => 'How many items to display on your page, in which order and how they are styled.'),'advanced'  => array('name' => 'Advanced','description' => 'Advanced item options such as category and specific seller filters. ')),'request_parameter_definitions' => array('eKeyword'  => array('name' => 'eKeyword','id' => 'eKeyword','tip' => 'The keywords which determine which items to display, similar to a search on the actual eBay site. Accepts some advanced operators / punctuation. See documentation for more details.','group' => 'keyword','title' => 'Item Search Query'),'eCampID'  => array('name' => 'eCampID','id' => 'eCampID','tip' => 'A campaign identifier linked to your eBay Partner Network account.','group' => 'keyword','title' => 'ePN Campaign ID'),'eSite'  => array('name' => 'eSite','id' => 'eSite','tip' => 'The eBay site from which items will be displayed. This also determines which site item links will point to.','type' => 'select','options' => array('1' => 'eBay US','2' => 'eBay IE','3' => 'eBay AT','4' => 'eBay AU','5' => 'eBay BE','7' => 'eBay CA','10' => 'eBay FR','11' => 'eBay DE','12' => 'eBay IT','13' => 'eBay ES','14' => 'eBay CH','15' => 'eBay UK','16' => 'eBay NL'),'default' => '1','group' => 'affiliate','title' => 'eBay Site'),'eCustomID'  => array('name' => 'eCustomID','id' => 'eCustomID','tip' => 'A textual identifier used for reporting in your EPN account.','group' => 'affiliate','title' => 'ePN Custom ID'),'aGeo'  => array('name' => 'aGeo','id' => 'aGeo','tip' => 'When enabled, this option detects the visitor\'s location using their IP address and automatically sets the appropriate eBay Site, overriding the eBay Site option. If the visitor\'s location can not be determined then the eBay Site option will be used.','type' => 'checkbox','value' => 'true','group' => 'affiliate','title' => 'Geographical IP Targeting'),'eSearchDesc'  => array('name' => 'eSearchDesc','id' => 'eSearchDesc','tip' => 'Perform item search query on the item\'s title and description text.','type' => 'radio','options' => array('false' => 'No','true' => 'Yes'),'default' => 'false','group' => 'items','title' => 'Search Title and Description'),'eListingType'  => array('name' => 'eListingType','id' => 'eListingType','tip' => 'Display only a certain listing type.','type' => 'select','options' => array('All' => 'All Listings','Auction' => 'Auction Only','AuctionWithBIN' => 'Auction With BIN','FixedPrice' => 'BIN Only'),'default' => 'All','group' => 'items','title' => 'Listing Type'),'eCondition'  => array('name' => 'eCondition','id' => 'eCondition','tip' => 'Only display items which are of a certain condition.','type' => 'select','options' => array('' => 'Any','New' => 'New','Used' => 'Used'),'group' => 'items','title' => 'Condition Filter'),'eMinPrice'  => array('name' => 'eMinPrice','id' => 'eMinPrice','tip' => 'Only display items above this price.','group' => 'items','title' => 'Minimum Price'),'eMaxPrice'  => array('name' => 'eMaxPrice','id' => 'eMaxPrice','tip' => 'Only display items below this price.','group' => 'items','title' => 'Maximum Price'),'aTheme'  => array('name' => 'aTheme','id' => 'aTheme','tip' => 'Determines how the items will be displayed on the page. There are a variety of themes to choose from.','type' => 'select','options' => array('default' => 'Default','fancy' => 'Fancy','column' => 'Column','grid' => 'Grid','universal' => 'Universal','unstyled' => 'Unstyled'),'default' => 'default','group' => 'display','title' => 'Theme'),'eSortOrder'  => array('name' => 'eSortOrder','id' => 'eSortOrder','tip' => 'The order in which items will be displayed.','type' => 'select','options' => array('BestMatch' => 'Best Match','EndTimeSoonest' => 'Items Ending First','StartTimeNewest' => 'Newly-Listed Items First','PricePlusShippingLowest' => 'Lowest First','PricePlusShippingHighest' => 'Highest First'),'default' => 'EndTimeSoonest','group' => 'display','title' => 'Order Items By'),'aDispLogo'  => array('name' => 'aDispLogo','id' => 'aDispLogo','tip' => 'Determines if the Right Now On eBay logo will be displayed above items.','type' => 'radio','options' => array('true' => 'Yes','false' => 'No'),'default' => 'true','value' => 'true','group' => 'display','title' => 'Display eBay Logo'),'eCount'  => array('name' => 'eCount','id' => 'eCount','tip' => 'How many items to display on each page.','default' => '10','group' => 'display','title' => 'Items Per Page'),'aColumns'  => array('name' => 'aColumns','id' => 'aColumns','tip' => 'Used to determine how many columns of items are displayed.','default' => '3','group' => 'display','title' => 'Number Of Columns'),'aWidth'  => array('name' => 'aWidth','id' => 'aWidth','tip' => 'If specified, any output will not exceed this width on your page.','group' => 'display','title' => 'Maximum Output Width'),'aColourP'  => array('name' => 'aColourP','id' => 'aColourP','tip' => 'Specify the primary theme colour for better integration on your site.','group' => 'display','title' => 'Theme Primary Colour'),'aColourS'  => array('name' => 'aColourS','id' => 'aColourS','tip' => 'Specify the secondary theme colour for better integration on your site.','group' => 'display','title' => 'Theme Secondary Colour'),'aColourB'  => array('name' => 'aColourB','id' => 'aColourB','tip' => 'Specify the background theme colour for better integration on your site.','group' => 'display','title' => 'Theme Background Colour'),'eCategoryInc'  => array('name' => 'eCategoryInc','id' => 'eCategoryInc','tip' => 'A comma separated list of eBay categories to include items from. See documentation for details of how to obtain category IDs.','group' => 'advanced','title' => 'Category Include'),'eCategoryExcl'  => array('name' => 'eCategoryExcl','id' => 'eCategoryExcl','tip' => 'A comma separated list of eBay categories to exclude items from. See documentation for details of how to obtain category IDs.','group' => 'advanced','title' => 'Category Exclude'),'eSellerId'  => array('name' => 'eSellerId','id' => 'eSellerId','tip' => 'Only display items from a specific seller.','group' => 'advanced','title' => 'Seller ID'),'eTopRated'  => array('name' => 'eTopRated','id' => 'eTopRated','tip' => 'Only display items listed by a seller with Top-rated seller status.','type' => 'checkbox','value' => 'true','group' => 'advanced','title' => 'Top Rated Sellers Only'),'eFreeShip'  => array('name' => 'eFreeShip','id' => 'eFreeShip','tip' => 'Only display items with a free shipping option.','type' => 'checkbox','value' => 'true','group' => 'advanced','title' => 'Free Shipping Only'),'ePaypal'  => array('name' => 'ePaypal','id' => 'ePaypal','tip' => 'Only display items which accept Paypal as a payment method.','type' => 'checkbox','value' => 'PayPal','group' => 'advanced','title' => 'Paypal Accepted Only')));$this->set_hostname();$this->check_hostname_allowed();}function get_settings() {return $this->settings;}function get_current_url() {  $url  = @( $_SERVER["HTTPS"] != 'on' ) ? 'http://'.$_SERVER["SERVER_NAME"] :  'https://'.$_SERVER["SERVER_NAME"];  $url .= ( $_SERVER["SERVER_PORT"] !== 80 ) ? ":".$_SERVER["SERVER_PORT"] : "";  $url .= $_SERVER["REQUEST_URI"];  return $url;}function add_query_arg($url = false, $args = array()) {  if(! $url) {  $url  = $this->get_current_url();    }$url_parsed = parse_url($url);if(array_key_exists('query', $url_parsed)) {parse_str($url_parsed['query'], $query_args);} else {$query_args = array();}foreach($args as $arg_key => $arg_value) {$query_args[$arg_key] = $arg_value;}$new_query_string = http_build_query($query_args);$url_parsed['query'] = $new_query_string;$url = http_build_url($url_parsed, array(), HTTP_URL_STRIP_PORT);  return $url;}function set_request_parameters($params_in) {$params_out = array();foreach($this->settings['request_parameter_definitions'] as $p) {if(array_key_exists($p['name'], $params_in) && $params_in[$p['name']]) {$params_out[$p['name']] = $params_in[$p['name']];} elseif(array_key_exists('default', $p)) {$params_out[$p['name']] = $p['default'];}}if(array_key_exists('aClientType', $params_in)) {$params_out['aClientType'] = $params_in['aClientType'];} else {$params_out['aClientType'] = 'PHP';}$params_out['aClientHost'] = $this->hostname;$params_out['aClientIP'] = $_SERVER['REMOTE_ADDR'];$this->request_parameters = $params_out;$this->aHash = md5(serialize($this->request_parameters));if($page = $this->get_pagination_page()) {$this->request_parameters['ePage'] = $page;}}function build_request() {$url = $this->settings['request_endpoint'];foreach($this->request_parameters as $data_key => $data_value) {switch($data_key) {case 'eKeyword':$data_value = urlencode($data_value);break;}$url .= '/' . $data_key . '/' . $data_value;}$this->request = $url;}function do_request() {if(! $this->response = @file_get_contents($this->request)) {die('<b>ERROR</b> Request error');}}function get_pagination_page() {if(isset($_REQUEST['cPage']) && isset($_REQUEST['aHash']) && ($_REQUEST['aHash'] == $this->aHash)) {return $_REQUEST['cPage'];} else {return false;}}function build_html_output() {if($this->get_pagination_page()) {$prev_page = $this->request_parameters['ePage'] - 1;$next_page = $this->request_parameters['ePage'] + 1;} else {$prev_page = false;$next_page = 2;}if($prev_page) {$page_prev_url = $this->add_query_arg(false, array('cPage' => $prev_page, 'aHash' => $this->aHash));$page_prev_url .= '#' . $this->settings['html_output_id_prefix'] . $this->aHash;} else {$page_prev_url = '#" style="display:none';}$page_next_url = $this->add_query_arg(false, array('cPage' => $next_page, 'aHash' => $this->aHash));$page_next_url .= '#' . $this->settings['html_output_id_prefix'] . $this->aHash;$width = '';if(array_key_exists('aWidth', $this->request_parameters)) {$width = ' style="width:' . $this->request_parameters['aWidth'] . ';margin:auto"';}$out = '<div id="' . $this->settings['html_output_id_prefix'] . $this->aHash  . '"' . $width . '>';$resp = str_replace($this->settings['html_output_prefix'] . 'prev" href="#"', $this->settings['html_output_prefix'] . 'prev" href="' . $page_prev_url . '"', $this->response);$resp = str_replace($this->settings['html_output_prefix'] . 'next" href="#"', $this->settings['html_output_prefix'] . 'next" href="' . $page_next_url . '"', $resp);$out .= $resp;$out .= '</div>';$this->output_html = $out;}function output_html() {echo $this->output_html;}function get_html() {return $this->output_html;}function embed($request_params, $echo = true) {$this->set_request_parameters($request_params);$this->build_request();$this->do_request();$this->build_html_output();if($echo) {$this->output_html();} else {return $this->get_html();}}function set_hostname() {$current_url = $this->get_current_url();$url_parsed = parse_url($current_url);$this->hostname = $url_parsed['host'];}function check_hostname_allowed() {if(strpos($this->hostname, 'ebay') !== false || strpos($this->hostname, 'paypal') !== false) {die('<b>ERROR</b> Hostname contains a disallowed keyword.');}}}if(! function_exists('http_build_url')) {define('HTTP_URL_REPLACE', 1);          define('HTTP_URL_JOIN_PATH', 2);        define('HTTP_URL_JOIN_QUERY', 4);       define('HTTP_URL_STRIP_USER', 8);       define('HTTP_URL_STRIP_PASS', 16);      define('HTTP_URL_STRIP_AUTH', 32);      define('HTTP_URL_STRIP_PORT', 64);      define('HTTP_URL_STRIP_PATH', 128);     define('HTTP_URL_STRIP_QUERY', 256);    define('HTTP_URL_STRIP_FRAGMENT', 512); define('HTTP_URL_STRIP_ALL', 1024);     function http_build_url($url, $parts = array (), $flags = HTTP_URL_REPLACE, &$new_url = false) {  $keys = array (    'user',    'pass',    'port',    'path',    'query',    'fragment'  );    if ($flags & HTTP_URL_STRIP_ALL) {    $flags |= HTTP_URL_STRIP_USER;    $flags |= HTTP_URL_STRIP_PASS;    $flags |= HTTP_URL_STRIP_PORT;    $flags |= HTTP_URL_STRIP_PATH;    $flags |= HTTP_URL_STRIP_QUERY;    $flags |= HTTP_URL_STRIP_FRAGMENT;  }    else if ($flags & HTTP_URL_STRIP_AUTH) {    $flags |= HTTP_URL_STRIP_USER;    $flags |= HTTP_URL_STRIP_PASS;  }    if(! is_array($url)) {  $parse_url = parse_url($url);    } else {  $parse_url = $url;  }    if (isset($parts['scheme']))    $parse_url['scheme'] = $parts['scheme'];  if (isset($parts['host']))    $parse_url['host'] = $parts['host'];    if ($flags & HTTP_URL_REPLACE) {    foreach ($keys as $key) {      if (isset($parts[$key]))        $parse_url[$key] = $parts[$key];    }  } else {        if (isset($parts['path']) && ($flags & HTTP_URL_JOIN_PATH)) {      if (isset($parse_url['path']))        $parse_url['path'] = rtrim(str_replace(basename($parse_url['path']), '', $parse_url['path']), '/') . '/' . ltrim($parts['path'], '/');      else        $parse_url['path'] = $parts['path'];    }        if (isset($parts['query']) && ($flags & HTTP_URL_JOIN_QUERY)) {      if (isset($parse_url['query']))        $parse_url['query'] .= '&' . $parts['query'];      else        $parse_url['query'] = $parts['query'];    }  }      foreach ($keys as $key) {    if ($flags & (int)constant('HTTP_URL_STRIP_' . strtoupper($key)))      unset($parse_url[$key]);  }  $new_url = $parse_url;  return ((isset($parse_url['scheme'])) ? $parse_url['scheme'] . '://' : '') . ((isset($parse_url['user'])) ? $parse_url['user'] . ((isset($parse_url['pass'])) ? ':' . $parse_url['pass'] : '') . '@' : '')    . ((isset($parse_url['host'])) ? $parse_url['host'] : '') . ((isset($parse_url['port'])) ? ':' . $parse_url['port'] : '') . ((isset($parse_url['path'])) ? $parse_url['path'] : '')    . ((isset($parse_url['query'])) ? '?' . $parse_url['query'] : '') . ((isset($parse_url['fragment'])) ? '#' . $parse_url['fragment'] : '');}}